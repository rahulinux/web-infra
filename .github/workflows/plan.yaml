name: Terraform Plan
on:
  push:
    branches:
      - "prod"
      - "staging"
      - "dev"
  pull_request:

  workflow_dispatch:
    inputs:
      environments:
        required: false
        description: 'list of environment'
        default: '["prod", "staging", "dev"]'

env:
  ENVIRONMENT: ${{ contains(inputs.environments, github.ref_name) && github.ref_name || 'dev' }}
  TF_VERSION: "1.0.5"

jobs:
  terraform-lint:
    name: terraform lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "${{ env.TF_VERSION }}"
    
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

  terraform-plan:
    name: terraform plan
    needs: [terraform-lint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "${{ env.TF_VERSION }}"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: "us-east-1"

    - name: Terraform Init
      id: init
      run: terraform init -backend-config="key=${{ env.ENVIRONMENT }}.tfstate" -var-file "./envs/${{ env.ENVIRONMENT }}.tfvars"
    
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -var-file "./envs/${{ env.ENVIRONMENT }}.tfvars"
      continue-on-error: true
    
    - name: Update Pull Request
      uses: actions/github-script@v6
      if: ${{ !env.ACT }} && github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1