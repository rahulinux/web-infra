name: Terraform Apply
on:
  issue_comment:
    types: [created]

  workflow_dispatch:
    inputs:
      environments:
        required: false
        description: 'list of environment'
        default: '["prod", "staging", "dev"]'

env:
  ENVIRONMENT: ${{ contains(inputs.environments, github.ref_name) && github.ref_name || 'dev' }}
  TF_VERSION: "1.0.5"

jobs:
  terraform-apply:
    name: terraform apply
    runs-on: ubuntu-latest
    # github.event.issue.pull_request && github.event.comment.body == 'terraform apply' &&
    # github.event.review.state == 'approved'
    if: github.event.issue.pull_request && github.event.comment.body == 'terraform apply'
    steps:   
    - name: Get PR SHA
      id: sha
      uses: actions/github-script@v4
      with:
        result-encoding: string
        script: |
          const { owner, repo, number } = context.issue;
          const pr = await github.pulls.get({
            owner,
            repo,
            pull_number: number,
          });
          return pr.data.head.sha

    - uses: actions/checkout@v2
      with:
        ref: ${{ steps.sha.outputs.result }}

    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "${{ env.TF_VERSION }}"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: "us-east-1"

    - name: Terraform Init
      id: init
      run: terraform init -backend-config="key=${{ env.ENVIRONMENT }}.tfstate" -var-file "./envs/${{ env.ENVIRONMENT }}.tfvars"

    - name: Run Apply
      id: apply
      run: terraform apply -no-color -auto-approve -input=false -var-file "./envs/${{ env.ENVIRONMENT }}.tfvars"

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: ${{ !env.ACT }} && github.event_name == 'pull_request'
      env:
        APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`

          <details><summary>Show Apply</summary>

          \`\`\`\n
          ${process.env.APPLY}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })